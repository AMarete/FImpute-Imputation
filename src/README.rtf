{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red217\green217\blue217;\red217\green217\blue217;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c87843\c87843\c87843;\cssrgb\c87843\c87843\c87843;
}
\margl1440\margr1440\vieww25100\viewh19100\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl279\partightenfactor0

\f1\fs23\fsmilli11761 \cf2 \cb3 \
### On occasion plink tends to flip alleles, its therefore best to use a normalized vcf file.\
### to convert plink to vcf:\
\
plink \'97\{species\} --file \{file\} \'97recode vcf-iid \'97out \{file\}\
\
#### compress with bgzip: \
bgzip \{file\}\
\
#### normalize the vcf with the reference fasta genome, bcftools is a great tool for this:\
### if there is need to split per chromosome, the -r flag can be used\
\
bcftools norm -d snps -cs -f \{ref_genome.fa\} -r \{chrom\} \{file.vcf.gz\} | bcftools view -m2 -M2 -Oz -o \{file2.vcf.gz\} \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl279\partightenfactor0
\cf2 ## However if one really needs to use plink, then the procedure below could be followed:\
### convert the plink file to binary format\
### change the sap name to chrom_pos_ref_alt\
### use option \'97recode 12 to generate plink files with alleles recoded as 1|2\
plink \'97\{species\} \'97file dt \'97make-bed --real-ref-alleles \'97out dt1\
echo "$(awk '\{$2=$1"_"$4"_"$5"_"$6 ;print $0 \}' dt1.bim)" > dt1.bim\
plink \'97bile dt1 \'97recode 12 \'97out dt2\
\
\
## add the vcf files to a temp directory e.g. assuming \{file2.vcf.gz\}, \{dt2.ped, dt2.map\} are from two populations\
mkdir tmp\
mv dt2* tmp/\
Mv file2.vcf.gz tmp/\
Mv \{other_ready_files\} tmp/\
\
### fimpute accepts unto 10 chips in same file, so a limit of 10 has been put in place\
\
### run snprecode\
\pard\pardeftab720\sl279\partightenfactor0

\fs23\fsmilli11761 \cf2 \cb4 \outl0\strokewidth0 ### 3 files created [\{PREFIX\}.geno, \{PREFIX\}.mark] for fimpute input and \{PREFIX\}.alleles to decode fimpute output\
\pard\pardeftab720\sl279\partightenfactor0

\fs23\fsmilli11761 \cf2 \cb3 \outl0\strokewidth0 ./snprecode -F tmp -O \{PREFIX\} \
\
# run fimpute per fimpute guidelines\
# For phased output, use option save haplotypes; diplotype\
./fimpute par.txt\
\
# recode from Fimpute format\
./snprecode -g genotypes_impute.txt -s snp_info.txt -n \{samples.txt\} -t 1 -a  
\fs23\fsmilli11761 \cb4 \outl0\strokewidth0 \{PREFIX\}.alleles -o \{PREFIX_2\}\
\
# a final vcf with study samples will be produced for downstream analysis i.e. \{PREFIX_2\}.vcf.gz\
# If fimpute was successful in phasing, the alleles will be phased with | separator, otherwise they\'92ll have a / separator as per vcf conventions \
}